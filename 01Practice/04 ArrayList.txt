ArrayList<E> class points:
=======================================================
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
				
1) ArrayList is a collections framework collection. 
2) It is defined in Java 1.2v.
3) When we need to store multiple objects with index 
	including duplicates in single threaded application
	or in method local operations 
	without thread safety we must choose ArrayList.
	
4) No, ArrayList is not synchronized collection
5) Yes, ArrayList is ordered collection. 
	It maintains Insertion Order with index
	 
6) ArrayList implemented data structure is re-sizable array.
7) ArrayList object default capacity is 10
   and its default capacityIncremental is half (Or) +1

8) ArrayList allows us to store all 4 types of elements
	H, H, U and D
9) ArrayList allows us store to null, multiple nulls are allowed

10) ArrayList stores maintains elements in Insertion Order
11) ArrayList allows to retrieve elements in both 
	random and sequential order
	
12) In search and remove operations, it implicitly calls
	equals() method and it is executed from searching or 
	removing object class or from its super class Object.	 	

ArrayList<E> class constructors
=================================================================
	1) public ArrayList() 
	2) public ArrayList(Collection<? extends E> c)
	3) public ArrayList(int initialCapacity) 

ArrayList<E> class methods
================================================================
In addition to Collection and List interface methods
ArrayList<E> class has its own methods, 

	01. public void ensureCapacity(int capacity)
	02. public void trimToSize()


Different operations we can perform on AL/any collection
	1) finding collection capacity				-> //no method, we must reflection api
	2) finding collection is empty or no		-> al1.isEmpty()
	 	finding collection size					-> al1.size()
	3) printing collection elements				-> al1.toString()
	
	4) adding elements to collection			-> al1.add(o)
	   copying elements from 					-> ArrayList(al1)
			one collection to another collection -> a12.addAll(a1);
	
	5) retrieving element from collection		-> al1.get(index)
												-> al1.iterator()
												-> al1.listIterator()
												-> al1.listIterator(index)
												-> for each loop
												-> al1.forEach(Consumer)
												-> al1.steam()
												-> al1.parallerSteam()
												-> al1.spliterator()

	6) searching element in collection			-> al1.contains(o) 	-> boolean (t/f)
		(we must override equals() method in	-> al1.indexOf(o)	-> index/-1
			this searching object class)		-> al1.lastIndexOf(o)							
			
	   searching muliple elements in collection	-> al1.containsAll(col)
											//new kw, List.of(-), Arrays.asList(-)			
																				

	7) removing one element from collection	-> al1.remove(index) -> b/s/c/i
												-> al1.remove(object) ->B/S/C/I/f/d/b/[]/obj	
												
	   removing muliple elements from collection-> al1.removeAll(col) //3 ways of creating collections
													al1.removeIf(Predicate)		
	   removing all elemement					-> al1.clear()

	8) inserting element						-> al1.add(index, o)
	9) replacing element						-> al1.set(index, o)
	10) sorting elements						-> al1.sort(Comparator/null)


//Program
package com.nit.hk.suncollections;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



public class Test02_ArrayList {
	public static void main(String[] args) throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
		
		ArrayList<Object> al1 = new ArrayList<>();

		//System.out.println(al1.capacity());
		
//Operation #1: Finding capacity of ArrayList
		//Reflection API code for accessing private members
		Class<?> clazz = al1.getClass();
		Field field = clazz.getDeclaredField("elementData");
		field.setAccessible(true);
		Object[] elementData = (Object[])field.get(al1);
		System.out.println(elementData.length);

//Operation #2: Finding size, counting number of objects in ArrayList		
		System.out.println(al1.size());
		
//Operation #3: Displaying elements available in ArrayList  		
		System.out.println(al1);
		System.out.println();

//Operation #4: Adding elements to ArrayList 		
		al1.add("a");
		al1.add("b");
		al1.add(5);
		al1.add(6.7);
		al1.add('p');
		al1.add(true);
		al1.add("a");
		al1.add(5);
		al1.add(null);
		al1.add(new A(5, 6));
		al1.add(null);
		al1.add(null);
		al1.add(new A(7, 8));
		al1.add(new A(5, 6));
		
		elementData = (Object[])field.get(al1);
		System.out.println(elementData.length);
		System.out.println(al1.size());
		System.out.println(al1);
				
//Operation #5: Retrieving elements from ArrayList
		System.out.println(al1.get(0));
		System.out.println(al1.get(5));
		//System.out.println(al1.get(-1));	//Rule #1: index >=0 && index<size()
		//System.out.println(al1.get(14));	//Rule #1: index >=0 && index<size()
		//System.out.println(al1.get(15));	//Rule #1: index >=0 && index<size()
		
		//String s1 = al1.get(1);			//Rule #2: we can not assign element 
											//to a variable of returning object type. 
											//Ex: String, because 
											//element is returned as Object type
											//we must assign it Object type variable
											//later we must type cast to return object
											//type
		Object obj;
		obj = al1.get(1); 		
		//System.out.println(obj.toUpperCase()); //Rule #3: can not invoke return object 
											//specific methods by using Object type ref			
		
		//String s1 = (String)obj;			//Rule #4: we must not type cast directly
											//we may get CCE, because collection is
											//heterogeneous
		
		//if(obj instanceof String) {		//Old style			
		//	String s1 = (String)obj;
		
		if(obj instanceof String s1) {		//Java 14 style	
			System.out.println(s1.toUpperCase());
		}
		System.out.println();
		
		//retrieving all elements from arraylist
		for(int i=0; i<al1.size(); i++) {	//Rule #4: condition operation must be <
			System.out.println(al1.get(i));	//but not <=. If <= is used there must be
		}									//al1.size()-1
		
		System.out.println();
		//for(int i=0; i<=al1.size(); i++) {	//O/P:ele1 .... end ele + RE: IOOBE
		//for(int i=0; i<=al1.size()-1; i++) {	//O/P:ele1 .... end ele 
		for(int i=0; i<al1.size()-1; i++) {		//O/P:ele1 .... end-1 ele 
			System.out.println(al1.get(i));			
		}
		
		System.out.println();
		for(int i=0; i<al1.size(); i++) {		//O/P: only a is display  
			System.out.println(al1.get(0));		//for al1.size() times	
		}
		System.out.println();

//Operation #6: searching an object -> implicitly equals() method and == operator are used
		//just knowing available or not
		System.out.println(al1.contains("a"));
		System.out.println(al1.contains("A"));
		System.out.println(al1.contains(5));
		System.out.println(al1.contains(null));
		System.out.println(al1.contains(new A(7, 8)));
		System.out.println();
		
		//knowing in which index this element is available
		System.out.println(al1);
		System.out.println(al1.indexOf("a"));
		System.out.println(al1.indexOf(5));
		System.out.println(al1.indexOf(null));
		System.out.println(al1.lastIndexOf(null));
		System.out.println(al1.lastIndexOf("A"));
		System.out.println(al1.lastIndexOf(new A(3, 5)));
		System.out.println();
		
		//update A class object whose data is 7 , 8 
		//by increasing x by 5 and y value 7
		System.out.println(al1);
		int index = al1.indexOf(new A(7, 8));
		if(index >= 0) {
			A a1 = (A)al1.get(index);
			a1.setX(a1.getX()+5);
			a1.setY(a1.getY()+7);
		}		
		System.out.println(al1);
		System.out.println();
		
//Operation #7:	removing an object from ArrayList -> here also equals() method and == operator are called 
		//we can remove element by index and also by object
		System.out.println(al1);
		System.out.println(al1.remove(5)); //here 5 is index, so 5th index object is removed
		System.out.println(al1);
		System.out.println(al1.remove((Integer)5)); //here 5 is object, so 5 is removed
		System.out.println(al1);
		System.out.println(al1.remove(6.7)); //here 6.7 is an object
	
		System.out.println(al1);
		ArrayList al2 = new ArrayList();	//Java 1.2v
		al2.add(null);
		al1.removeAll(al2);			//removing all occurrences of an element
		System.out.println(al1);
		
		al1.removeAll(List.of("a"));  //Java 9v static factory method to create
		System.out.println(al1);		// a unmodifiable collection with initialization

		al1.removeAll(Arrays.asList(new A(5,6))); //Java 1.2v static factory method to create
		System.out.println(al1);		// a unmodifiable collection with initialization 
		
		//al1.clear();
		//System.out.println(al1);
		
		
//		for (int i = 0; i < al1.size(); i++) {
//			Object ele = al1.get(i);
//			if (ele instanceof String) {
//				al1.remove(i);
//			}
//		}
 		
		
//		for(int i=0; i<al1.size(); i++) {
//			Object ele = al1.get(i);
//			if(((Integer)ele)%2==0) {
//				al1.remove(i);
//			}
//		}
		
//		for(int i=0; i<al1.size(); i++) {
//			Object ele = al1.get(i);
//			if(ele instanceof A) {
//				al1.remove(i);
//			}
//		}
		System.out.println();
		
		al1.removeIf(ele -> ele instanceof String);//Java 8v
		System.out.println(al1);
		al1.removeIf(ele -> ele instanceof Integer);//Java 8v
		System.out.println(al1);
		al1.removeIf(ele -> ele instanceof A);//Java 8v
		System.out.println(al1);
		System.out.println();
//Operation #8: inserting new element in AL		
		al1.clear();
		al1.add("a");
		al1.add("b");
		al1.add(5);
		al1.add(6.7);
		al1.add(true);
		al1.add(null);
		System.out.println(al1);
		al1.add(2, "C");
		System.out.println(al1);
		
		al1.add(al1.size(), "7"); //Rule #1: index>=0 && index<=size 
		System.out.println(al1);	//(index==size->add)
		
		//al1.add(al1.size() + 1, "8");
		//al1.add(-1, "8");

//Operation #9: replacing	an existing element with new element
		al1.set(3, 9);				//Rule #1: index>=0 && index<size
		System.out.println(al1);
		
		//al1.set(al1.size(), 10);
		
		
//Operation	#10: sorting elements	
		al1.clear();
		al1.add("a");
		al1.add("c");
		al1.add("b");
		System.out.println(al1);
		al1.sort(null);
		System.out.println(al1);
		
		
		
	} 
}






		
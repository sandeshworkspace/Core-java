LinkedList<E> class points:
=======================================================
public class LinkedList<E>
    extends AbstractSequentialList<E>
    implements List<E>, Deque<E>, Cloneable, java.io.Serializable
				
1) LinkedList is a collections framework collection. 
2) It is defined in Java 1.2v.
3) If our more operations are insert and remove
	at begin or in middle and also if need to 
	retrieve elements only in sequential order
	we must choose LinkedList.
	
4) LinkedList is not synchronized collection
5) ArrayList is ordered collection. 
	It maintains Insertion Order without index
	 
6) LinkedList implemented data structure is doubly-linked list.
8) LinkedList object default capacity is 0
   and its default capacityIncremental is 1

8) LinkedList allows us to store all 4 types of elements
	H, H, U and D
9) LinkedList allows us store to null, multiple nulls are allowed

10) LinkedList stores elements in Insertion Order
11) LinkedList allows to retrieve elements only in sequential order
	
12) In search and remove operations, it implicitly calls
	equals() method and it is executed from searching or 
	removing object class or from its super class Object.	 	

LinkedList<E> class constructors
=================================================================
	1) public LinkedList() 
	2) public LinkedList(Collection<? extends E> c)
 

LinkedList<E> class methods
================================================================
In addition to Collection and List interface methods
LinkedList<E> class does not have its own methods, 
but it also have method from Deque.

From Java 5v, LinkedList is implementing Deque interface also
 

//Program
================================================================

package com.nit.hk.suncollections;

import java.util.LinkedList;

public class Test03_LinkedList {
	public static void main(String[] args) {
		
		LinkedList<Object> linkeList = new LinkedList<>();
//Operation #1: finding empty or not
		System.out.println(linkeList.isEmpty());
		
//Operation #2: finding size
		System.out.println(linkeList.size());
		
//Operation #3: printing elements
		System.out.println(linkeList);
		System.out.println();
		
//Operation #4: adding elements
		linkeList.add("a");
		linkeList.add("b");
		linkeList.add(5);
		linkeList.add(6.7);
		linkeList.add(null);
		linkeList.add(new A(5,6));
		linkeList.add("a");
		linkeList.add(null);
		
		System.out.println(linkeList.isEmpty());
		System.out.println(linkeList.size());
		System.out.println(linkeList);
		System.out.println();
		
//Operation #5: searching elements -> ==operator and equals() method are used
		System.out.println(linkeList.contains("a"));  //Linear search algorithm
		System.out.println(linkeList.contains(5));
		System.out.println(linkeList.contains(null));
		System.out.println(linkeList.contains(new A(5, 6)));
		System.out.println();
		
		System.out.println(linkeList.indexOf("a")); //Linear search algorithm
		System.out.println(linkeList.indexOf("A"));
		System.out.println(linkeList.indexOf(null));
		System.out.println(linkeList.indexOf(new A(5, 6)));
		System.out.println();
		
//Operation #6: retrieving element		
		System.out.println(linkeList);
		System.out.println(linkeList.get(3)); 		//Binary search algorithm
		System.out.println();
//Operation #7: removing element 		
		System.out.println(linkeList);
		System.out.println(linkeList.remove(4));	//Binary search algorithm
		System.out.println(linkeList);
		
		System.out.println(linkeList.remove(new A(5, 6)));
		System.out.println(linkeList);
		
//Operation #8: inserting element
		linkeList.add(3, "X");          //Binary search algorithm
		System.out.println(linkeList);
		
//Operation #9: replacing element		
		linkeList.set(2, "Y");			//Binary search algorithm
		System.out.println(linkeList);
		
//Operation #10: sorting element
		linkeList.clear();
		linkeList.add("a");
		linkeList.add("c");
		linkeList.add("b");
		System.out.println(linkeList);
		linkeList.sort(null);
		System.out.println(linkeList);
		
	}
}





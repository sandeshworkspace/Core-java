Working with Map<E>, SortedMap<E>, NavigableMap<E> interfaces 
==============================================================
- Map interface is a root interface of all maps(collection with mappings).
- It represents a group of entries (key, value) pair objects.
- A map cannot contain duplicate keys, can contains duplicate values. 
- Each key can map to at most one value only.
- One value can used with multiple keys.
- This interface is available from Java1.2v
 
Note: It is not sub interface of Collection and Iterable interfaces
- when we need to store objects with mappings we must use Map hierarchy classes
- Map has below 8 implemented classes
- 7 are direct implemented classes and 1 is SortedSet interface implemented class  

Diagram:
									  Map<K, V>
						
				SortedMap<K,V>
				
				NavigableMap<K, V>	
				
									AbstractMap<K,V>							Dictionary
									
									
				TreeMap<K,V>		HashMap<K, V>		  WeakHashMap<K,V>		Hashtable<K,V>
													
				EnumMap<K,V>							IdentityHashMap<K, V>		
								LinkedHashMap<K,V>								 Properties
								
Map interface  methods
=======================
	- Map interface 
		
		1) public boolean isEmpty()
		2) public int size()
		
		3) public boolean put(K k, V v)
		4) public boolean putAll(Map<? extends K, ? extends V> m) 
		
		5) public boolean containsKey(K k)
		6) public boolean containsValue(V v)
		
		7) public boolean remove(K k)		 
		8) public void clear()
		
		9) public V get(K k)
		10)public Set<K> keySet()
		11)public Collection<V> values()
		12)public Set<Map.Entry<K, V>> entrySet()  
		
		13) public int hashCode()
		14) public boolean equals(Object obj)
			
	Hence upto Java 8 version we do not have any new methods in 
	Set interface. But in Java 9 version 12 new static factory 
	methods are added in Set interface for creating immutable 
	set type collection object with one line of code.


	public default V	compute(K key, BiFunction<? super K,?? super V,?? extends V> remappingFunction)
	public default V	computeIfAbsent(K key, Function<? super K,?? extends V> mappingFunction)
	public default V	computeIfPresent(K key, BiFunction<? super K,?? super V,?? extends V> remappingFunction)
	
	public static <K,V> Map<K,V>	copyOf(Map<? extends K,?? extends V> map)

They are:
public static <E> java.util.Set<E> of();
public static <E> java.util.Set<E> of(E e1);
public static <E> java.util.Set<E> of(E e1, E e2);
public static <E> java.util.Set<E> of(E e1, E e2, E e3);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4, E e5);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, Ee8);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, Ee8, E e9);
public static <E> java.util.Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, Ee8, E e9, E e10);
public static <E> java.util.Set<E> of(E... e);
SortedSet and its methods
====================
1) SortedSet is a sub interface of Set
2) It is used for storing objects in sorting order
     The sorting order may Ascending order or 
     may descending order. It is based on the sorting order 
     supplied by the adding object class through Comparable
     and Comparator interfaces.
3) In addition to the methods inheriting from Collection and 
     Set interfaces, SortedSet interface has its own group of 
     methods for retrieving objects on sorting order base. 
4) This interface provides 6 additional methods. They are:
 public E first();
 public E last();
 public SortedSet<E> headSet(E);
 public SortedSet<E> tailSet(E);
 public SortedSet<E> subSet(E, E);
 public Comparator<? super E> comparator();
 public default Spliterator<E> spliterator();
 
NavigableSet interface and its methods
=============================
1. It is is the sub interface of SortedSet
2. It is given in 1.6 version for adding more navigable methods
3. It has 12 more methods, the methods are:
 public E pollFirst(); [returning and removing]
 public E pollLast(); [returning and removing]
 public E lower(E e); [returns < e]
 public E higher(E e); [returns > e]
 public E floor(E e); [returns <= e]
 public E ceiling(E e); [returns >= e]
 public NavigableSet<E> headSet(E toEle, boolean inclusive);
 public NavigableSet<E> tailSet(E fromEle, boolean inclusive);  
 public NavigableSet<E> subSet(E startEle, boolean inclusive, 
    E endEle, boolean inclusive);
 public Iterator<E> iterator();
 public Iterator<E> descendingIterator();
 public NavigableSet<E> descendingSet();


We must use 
- HashSet collection for storing unique 
 elements without any order.
- LinkedHashSet for storing unique 
 elements in insertion order
- TreeSet for storing unique elements in 
 sorting order (ASC or DESC)
